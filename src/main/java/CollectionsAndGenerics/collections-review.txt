Collections
-----------
1. List is an interface type and a collection
2. Using interfaces as the reference type you can use different implementations for that reference type
3. ArrayList<>() is a concrete implementation of List which is an interface - a reference type - not synchronised
4. Interfaces: Iterator -> Collection -> List, Set, SortedSet, Queue
5. List:
    - elements are ordered to how they are added
    - searchable by index
    - duplicates allowed
    - good for iterating
    - implementations: ArrayList, LinkedList
6. Set:
    - elements can not be searched by index
    - basic sets are not ordered
    - no duplicates - checks hashcode() first, if an element already exists with the same hashcode it then checks equals()
    - can iterate
    - implementations: HashSet, LinkedHashSet
7. SortedSet implementations: TreeSet - have to implement Comparable interface or use Comparator
   in object being stored
8. Queue implementation: DeQue - double ended queue
9. List.of(), Set.of(). Map.of() produce immutable objects.

Maps (Key / Value)
------------------
1. Interfaces: Map -> SortedMap
2. Map Interface:
    - elements are key value pairs
    - duplicate keys not allowed, original value is overwritten if you re-use a key
    - gets values quickly but not good for iterating, have to iterate indirectly by creating a keySet
    - implementations: HashMap, HashTable (deprecated), LinkedHashMap
      EnumMap, IdentityHashMap, WeakHasMap, SoftHashMap, TreeMap
3. HashTable:
   - threadsafe
   - deprecated
   - no null key values
4. HashMap (not threadsafe) / ConcurrentHashMap (threadsafe):
   - can take ONE null at index 0
   - if 2 objects are equal, they should have the same hashcode() value returned.
     So if you override the hashcode() method you need to override the equals() method and vice-versa
     so that they still work together. This is because the node is checked on both the hashcode and equals result
   - HashMaps are made up of an array of indexes (usually 16, 0 - 15), At each index is a 'bucket' containing nodes
     connected as a linked list. A node = (Key, Hash, Value, NextNodePointer)
   - HashMap put() works by finding the hashcode of the key. It then finds the index depending on the size of the
     index array by dividing the hashcode by the max range of the array (array size - 1).
     It then places that node at that index (in the bucket).
     If a node already exists at that index (or is already in the bucket), it then checks the new node against the
     equals method of all the existing nodes at that index. If an equals method of any existing node returns true, that existing node
     is replaced by the new node. If all return false, then the new node is added. The NextNodePointer of the last node
     in the bucket is updated to point to the new added node, which then becomes the last node in the bucket.
     See MapEqualsChallenge.java for an example.
   - HashMap.get() works by calculating the hashcode, the index is then calculated, and each node at that
     index has both its hashcode and the equals method on the key checked to see if they both match.
     If successful, the value is returned.
   - Java8+, if the number of nodes at an index (or in the bucket) exceeds a threshold (usually 8),
     that particular bucket only switches from a linked list to a balanced tree for better performance.
   - ConcurrentHashMap, reads are concurrent and fast, only writes block and only at a segment level,
     not the whole table.
5. TreeMap:
   - is a sorted Map whereby the keys are sorted on insertion. Need to implement Comparable interface compare() method
     or pass an Comparator or Exception is thrown. Sort operations performed on insertion.
6. LinkedHashMap:
   - preserve insert order by using a doubly linked list
7. EnumMap:
   - HashMap where the key is from an ENUM
8. WeakHashMap:
   - if the only reference to value is the key in the hash itself then the garbage collector will
   clean it up. Need external strong reference to stop GC form cleaning it up.
9. SoftHashMap:
   - similar to WeakHashMap but GC will only clear it up if there is a real need to ie. short on heap memory
10. Fail fast - defined as throwing a concurrent modification exception while iterating and inserting at the same time
11. Collections.synchronizedMap(anyMapObject) will return a synchronized map where all API's are synchronized
   -  means that all reads/writes block while accessed by a particular thread until thread has finished
12. Keys are unique ie. a set. If you add() using an existing key the value is overwritten

Ordering Collections
--------------------
1. Use Comparator and Comparable interfaces
2. Comparable has a single method to implement: compareTo, returns 0, 1 or -1
3. Comparisons are done using the collating sequence: 0-9 before A-Z before a-z etc.
   The alphabet that Java uses in comparing characters is called a collating sequence.
   All characters are placed into this sequence, so any two characters can be compared.
   Here is the part of the sequence that includes the most common characters:

    sp ! " # $ % & ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ?
    @  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ] ^ _
    `  a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~

    Characters are listed in increasing value, so

    A < K
    0 < Z
    Z < a
    % < +
    @ < {
    z < ~


    Example: value.compareTo(argument)

    If the value is equal to the argument then 0 is returned.
    If the value is less than the argument then -1 is returned.
    If the value is greater than the argument then 1 is returned.

        The first character listed 'sp' stands for the single space character. For example,

        " hello".compareTo("hello")

        returns a negative value since sp < h in the order

    Most of the time you don't need these details. But sometimes you do, so it is nice to know that they exist.
    The fact that space comes before nearly all other characters is sometimes useful to explain unexpected
    program behavior.

