1. Abstract class defines a class that can have abstract methods that can then be implemented
   in many different ways in many different sub classes
2. In Java, we have single inheritance ie. a class can only inherit from one class
3. Interfaces enable a class to inherit multiple behaviour from many other interfaces
4. The method signature in Java is the name of the method and the parameter list, not the return type or visibility
5. Interfaces can not be instantiated, they only define behaviour
6. Good for using polymorphism with types and using in collections ie. can be used as a generic reference type
7. Interfaces can also contain CONSTANTS
8. Use inheritance if you want to share state and behaviour in the sub-class ie. Class B is a kind of Class A,
   just more specialised
9. Use interfaces if you want to share behaviour across classes ie. Class A and Class B both print their name
10. Convention to use 'able' at the end of an Interface name ie. Name'able'
11. From Java 8 interfaces support default methods that can be overridden in class implementations and provide
    a single location to write and edit code. They're overridden with per-class precision.
12. If classes implement interfaces, you can use those interface types as references to cast objects from
    said classes and call the interface defined methods. ie.

    interface A;
    class B implements A;

    bObjectRef= new Class B();

    You can now pass bObjectRef to the following method

    executeMethod(A localObjectRef);

    since bObjectRef has implementations for all of A's method definitions.

13. Default method rules.
Rule 1. In the case, class A extends B and implements C. If C has a default method with the same method signature
as a method in the superclass B, then the method in class B is executed.

Rule 2. In the case where class C implements B, and B extends A. If A and B have default methods with the same signature then
the method in Interface B wins.

Rule 3. In the case class A implements B,C. If both B and C have a default method with the same method signature then
class A must provide a concrete implementation that overrides both. You can however provide an implementation
that calls the default method in either B or C like B.super.defaultMethodName()