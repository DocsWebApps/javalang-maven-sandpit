1. stream().filter(lambda).forEach(lambda) - fluent programming style
2. stream allows you to view the collection and apply operations to each object in the stream - like a Linux pipe
3. In this case, forEach is a terminal operation, filter is a intermediate operation
5. Intermediate operations return a stream object that can have other intermediate or a terminal operation applied to it
6. Stream calls turn a collection into a pipeline
7. A stream pipeline consists of a source, 0 or more intermediate operations and one terminal operation
8. Map is an intermediate operation
9. Example: stream().filter(lambda).map(lambda).forEach(lambda)
